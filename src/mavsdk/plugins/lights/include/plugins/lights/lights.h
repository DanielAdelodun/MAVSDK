// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/lights/lights.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "plugin_base.h"

#include "handle.h"

namespace mavsdk {

class System;
class LightsImpl;

/**
 * @brief
 */
class Lights : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto lights = Lights(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Lights(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto lights = Lights(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Lights(std::shared_ptr<System> system); // new

    /**
     * @brief Destructor (internal use only).
     */
    ~Lights() override;

    /**
     * @brief Possible results returned for light requests
     */
    enum class Result {
        Unknown, /**< @brief Unknown result. */
        Success, /**< @brief Request succeeded. */
        NoSystem, /**< @brief No system is connected. */
        ConnectionError, /**< @brief Connection error. */
        Busy, /**< @brief Vehicle is busy. */
        OutOfBounds, /**< @brief Strip or Light index out of bounds. */
        Timeout, /**< @brief Request timed out. */
        Failed, /**< @brief Request failed. */
    };

    /**
     * @brief Stream operator to print information about a `Lights::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Lights::Result const& result);

    /**
     * @brief
     */
    struct LightStrip {
        std::vector<uint32_t> lights{}; /**< @brief */
    };

    /**
     * @brief Equal operator to compare two `Lights::LightStrip` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const Lights::LightStrip& lhs, const Lights::LightStrip& rhs);

    /**
     * @brief Stream operator to print information about a `Lights::LightStrip`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Lights::LightStrip const& light_strip);

    /**
     * @brief
     */
    struct LightMatrix {
        std::vector<LightStrip> strips{}; /**< @brief */
    };

    /**
     * @brief Equal operator to compare two `Lights::LightMatrix` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const Lights::LightMatrix& lhs, const Lights::LightMatrix& rhs);

    /**
     * @brief Stream operator to print information about a `Lights::LightMatrix`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Lights::LightMatrix const& light_matrix);

    /**
     * @brief Callback type for asynchronous Lights calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief Set all lights to the given colors.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_matrix(LightMatrix matrix_colors) const;

    /**
     * @brief Set the lights on a given strip to the given colors.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result set_strip(uint32_t strip_id, LightStrip strip_colors) const;

    /**
     * @brief Set whether the lights should follow the flight mode.
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result follow_flight_mode(bool enable) const;

    /**
     * @brief Copy constructor.
     */
    Lights(const Lights& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const Lights& operator=(const Lights&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<LightsImpl> _impl;
};

} // namespace mavsdk