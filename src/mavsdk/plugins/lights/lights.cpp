// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/lights/lights.proto)

#include <iomanip>

#include "lights_impl.h"
#include "plugins/lights/lights.h"

namespace mavsdk {

using LightStrip = Lights::LightStrip;
using LightMatrix = Lights::LightMatrix;

Lights::Lights(System& system) : PluginBase(), _impl{std::make_unique<LightsImpl>(system)} {}

Lights::Lights(std::shared_ptr<System> system) :
    PluginBase(),
    _impl{std::make_unique<LightsImpl>(system)}
{}

Lights::~Lights() {}

Lights::Result Lights::set_matrix(LightMatrix matrix_colors) const
{
    return _impl->set_matrix(matrix_colors);
}

Lights::Result Lights::set_strip(uint32_t strip_id, LightStrip strip_colors) const
{
    return _impl->set_strip(strip_id, strip_colors);
}

Lights::Result Lights::follow_flight_mode(bool enable) const
{
    return _impl->follow_flight_mode(enable);
}

std::ostream& operator<<(std::ostream& str, Lights::Result const& result)
{
    switch (result) {
        case Lights::Result::Unknown:
            return str << "Unknown";
        case Lights::Result::Success:
            return str << "Success";
        case Lights::Result::NoSystem:
            return str << "No System";
        case Lights::Result::ConnectionError:
            return str << "Connection Error";
        case Lights::Result::Busy:
            return str << "Busy";
        case Lights::Result::OutOfBounds:
            return str << "Out Of Bounds";
        case Lights::Result::Timeout:
            return str << "Timeout";
        case Lights::Result::Failed:
            return str << "Failed";
        default:
            return str << "Unknown";
    }
}

bool operator==(const Lights::LightStrip& lhs, const Lights::LightStrip& rhs)
{
    return (rhs.lights == lhs.lights);
}

std::ostream& operator<<(std::ostream& str, Lights::LightStrip const& light_strip)
{
    str << std::setprecision(15);
    str << "light_strip:" << '\n' << "{\n";
    str << "    lights: [";
    for (auto it = light_strip.lights.begin(); it != light_strip.lights.end(); ++it) {
        str << *it;
        str << (it + 1 != light_strip.lights.end() ? ", " : "]\n");
    }
    str << '}';
    return str;
}

bool operator==(const Lights::LightMatrix& lhs, const Lights::LightMatrix& rhs)
{
    return (rhs.strips == lhs.strips);
}

std::ostream& operator<<(std::ostream& str, Lights::LightMatrix const& light_matrix)
{
    str << std::setprecision(15);
    str << "light_matrix:" << '\n' << "{\n";
    str << "    strips: [";
    for (auto it = light_matrix.strips.begin(); it != light_matrix.strips.end(); ++it) {
        str << *it;
        str << (it + 1 != light_matrix.strips.end() ? ", " : "]\n");
    }
    str << '}';
    return str;
}

} // namespace mavsdk