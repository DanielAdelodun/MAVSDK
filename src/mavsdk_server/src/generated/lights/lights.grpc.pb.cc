// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lights/lights.proto

#include "lights/lights.pb.h"
#include "lights/lights.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace lights {

static const char* LightsService_method_names[] = {
  "/mavsdk.rpc.lights.LightsService/SetMatrix",
  "/mavsdk.rpc.lights.LightsService/SetStrip",
  "/mavsdk.rpc.lights.LightsService/FollowFlightMode",
};

std::unique_ptr< LightsService::Stub> LightsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LightsService::Stub> stub(new LightsService::Stub(channel, options));
  return stub;
}

LightsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetMatrix_(LightsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetStrip_(LightsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FollowFlightMode_(LightsService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LightsService::Stub::SetMatrix(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest& request, ::mavsdk::rpc::lights::SetMatrixResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::lights::SetMatrixRequest, ::mavsdk::rpc::lights::SetMatrixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMatrix_, context, request, response);
}

void LightsService::Stub::async::SetMatrix(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest* request, ::mavsdk::rpc::lights::SetMatrixResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::lights::SetMatrixRequest, ::mavsdk::rpc::lights::SetMatrixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMatrix_, context, request, response, std::move(f));
}

void LightsService::Stub::async::SetMatrix(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest* request, ::mavsdk::rpc::lights::SetMatrixResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMatrix_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetMatrixResponse>* LightsService::Stub::PrepareAsyncSetMatrixRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::lights::SetMatrixResponse, ::mavsdk::rpc::lights::SetMatrixRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMatrix_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetMatrixResponse>* LightsService::Stub::AsyncSetMatrixRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMatrixRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LightsService::Stub::SetStrip(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest& request, ::mavsdk::rpc::lights::SetStripResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::lights::SetStripRequest, ::mavsdk::rpc::lights::SetStripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetStrip_, context, request, response);
}

void LightsService::Stub::async::SetStrip(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest* request, ::mavsdk::rpc::lights::SetStripResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::lights::SetStripRequest, ::mavsdk::rpc::lights::SetStripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStrip_, context, request, response, std::move(f));
}

void LightsService::Stub::async::SetStrip(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest* request, ::mavsdk::rpc::lights::SetStripResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStrip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetStripResponse>* LightsService::Stub::PrepareAsyncSetStripRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::lights::SetStripResponse, ::mavsdk::rpc::lights::SetStripRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetStrip_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetStripResponse>* LightsService::Stub::AsyncSetStripRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetStripRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LightsService::Stub::FollowFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest& request, ::mavsdk::rpc::lights::FollowFlightModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::lights::FollowFlightModeRequest, ::mavsdk::rpc::lights::FollowFlightModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FollowFlightMode_, context, request, response);
}

void LightsService::Stub::async::FollowFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest* request, ::mavsdk::rpc::lights::FollowFlightModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::lights::FollowFlightModeRequest, ::mavsdk::rpc::lights::FollowFlightModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FollowFlightMode_, context, request, response, std::move(f));
}

void LightsService::Stub::async::FollowFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest* request, ::mavsdk::rpc::lights::FollowFlightModeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FollowFlightMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::FollowFlightModeResponse>* LightsService::Stub::PrepareAsyncFollowFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::lights::FollowFlightModeResponse, ::mavsdk::rpc::lights::FollowFlightModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FollowFlightMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::FollowFlightModeResponse>* LightsService::Stub::AsyncFollowFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFollowFlightModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

LightsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightsService::Service, ::mavsdk::rpc::lights::SetMatrixRequest, ::mavsdk::rpc::lights::SetMatrixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LightsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::lights::SetMatrixRequest* req,
             ::mavsdk::rpc::lights::SetMatrixResponse* resp) {
               return service->SetMatrix(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightsService::Service, ::mavsdk::rpc::lights::SetStripRequest, ::mavsdk::rpc::lights::SetStripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LightsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::lights::SetStripRequest* req,
             ::mavsdk::rpc::lights::SetStripResponse* resp) {
               return service->SetStrip(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightsService::Service, ::mavsdk::rpc::lights::FollowFlightModeRequest, ::mavsdk::rpc::lights::FollowFlightModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LightsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::lights::FollowFlightModeRequest* req,
             ::mavsdk::rpc::lights::FollowFlightModeResponse* resp) {
               return service->FollowFlightMode(ctx, req, resp);
             }, this)));
}

LightsService::Service::~Service() {
}

::grpc::Status LightsService::Service::SetMatrix(::grpc::ServerContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest* request, ::mavsdk::rpc::lights::SetMatrixResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightsService::Service::SetStrip(::grpc::ServerContext* context, const ::mavsdk::rpc::lights::SetStripRequest* request, ::mavsdk::rpc::lights::SetStripResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightsService::Service::FollowFlightMode(::grpc::ServerContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest* request, ::mavsdk::rpc::lights::FollowFlightModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace lights

