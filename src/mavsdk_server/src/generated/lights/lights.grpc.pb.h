// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lights/lights.proto
#ifndef GRPC_lights_2flights_2eproto__INCLUDED
#define GRPC_lights_2flights_2eproto__INCLUDED

#include "lights/lights.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace lights {

// *
// Control vehicle lights.
// 
// Each light is addressed by a pair of numbers - the strip ID and the light ID.
// Or euivalently we can consider each light as being part of a 2D matrix of lights.
// The API assumes each light is a WRGB LED, with 8-bit depth per compoent.
// Each LED then has 4 bytes of data.
//
class LightsService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.lights.LightsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 
    // Set all lights to the given colors. 
    virtual ::grpc::Status SetMatrix(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest& request, ::mavsdk::rpc::lights::SetMatrixResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::SetMatrixResponse>> AsyncSetMatrix(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::SetMatrixResponse>>(AsyncSetMatrixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::SetMatrixResponse>> PrepareAsyncSetMatrix(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::SetMatrixResponse>>(PrepareAsyncSetMatrixRaw(context, request, cq));
    }
    // 
    // Set the lights on a given strip to the given colors. 
    virtual ::grpc::Status SetStrip(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest& request, ::mavsdk::rpc::lights::SetStripResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::SetStripResponse>> AsyncSetStrip(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::SetStripResponse>>(AsyncSetStripRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::SetStripResponse>> PrepareAsyncSetStrip(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::SetStripResponse>>(PrepareAsyncSetStripRaw(context, request, cq));
    }
    // 
    // Set whether the lights should follow the flight mode. 
    virtual ::grpc::Status FollowFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest& request, ::mavsdk::rpc::lights::FollowFlightModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::FollowFlightModeResponse>> AsyncFollowFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::FollowFlightModeResponse>>(AsyncFollowFlightModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::FollowFlightModeResponse>> PrepareAsyncFollowFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::FollowFlightModeResponse>>(PrepareAsyncFollowFlightModeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 
      // Set all lights to the given colors. 
      virtual void SetMatrix(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest* request, ::mavsdk::rpc::lights::SetMatrixResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMatrix(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest* request, ::mavsdk::rpc::lights::SetMatrixResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 
      // Set the lights on a given strip to the given colors. 
      virtual void SetStrip(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest* request, ::mavsdk::rpc::lights::SetStripResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetStrip(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest* request, ::mavsdk::rpc::lights::SetStripResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 
      // Set whether the lights should follow the flight mode. 
      virtual void FollowFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest* request, ::mavsdk::rpc::lights::FollowFlightModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FollowFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest* request, ::mavsdk::rpc::lights::FollowFlightModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::SetMatrixResponse>* AsyncSetMatrixRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::SetMatrixResponse>* PrepareAsyncSetMatrixRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::SetStripResponse>* AsyncSetStripRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::SetStripResponse>* PrepareAsyncSetStripRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::FollowFlightModeResponse>* AsyncFollowFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::lights::FollowFlightModeResponse>* PrepareAsyncFollowFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetMatrix(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest& request, ::mavsdk::rpc::lights::SetMatrixResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetMatrixResponse>> AsyncSetMatrix(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetMatrixResponse>>(AsyncSetMatrixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetMatrixResponse>> PrepareAsyncSetMatrix(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetMatrixResponse>>(PrepareAsyncSetMatrixRaw(context, request, cq));
    }
    ::grpc::Status SetStrip(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest& request, ::mavsdk::rpc::lights::SetStripResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetStripResponse>> AsyncSetStrip(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetStripResponse>>(AsyncSetStripRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetStripResponse>> PrepareAsyncSetStrip(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetStripResponse>>(PrepareAsyncSetStripRaw(context, request, cq));
    }
    ::grpc::Status FollowFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest& request, ::mavsdk::rpc::lights::FollowFlightModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::FollowFlightModeResponse>> AsyncFollowFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::FollowFlightModeResponse>>(AsyncFollowFlightModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::FollowFlightModeResponse>> PrepareAsyncFollowFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::FollowFlightModeResponse>>(PrepareAsyncFollowFlightModeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetMatrix(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest* request, ::mavsdk::rpc::lights::SetMatrixResponse* response, std::function<void(::grpc::Status)>) override;
      void SetMatrix(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest* request, ::mavsdk::rpc::lights::SetMatrixResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetStrip(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest* request, ::mavsdk::rpc::lights::SetStripResponse* response, std::function<void(::grpc::Status)>) override;
      void SetStrip(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest* request, ::mavsdk::rpc::lights::SetStripResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FollowFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest* request, ::mavsdk::rpc::lights::FollowFlightModeResponse* response, std::function<void(::grpc::Status)>) override;
      void FollowFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest* request, ::mavsdk::rpc::lights::FollowFlightModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetMatrixResponse>* AsyncSetMatrixRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetMatrixResponse>* PrepareAsyncSetMatrixRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetStripResponse>* AsyncSetStripRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::SetStripResponse>* PrepareAsyncSetStripRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::SetStripRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::FollowFlightModeResponse>* AsyncFollowFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lights::FollowFlightModeResponse>* PrepareAsyncFollowFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetMatrix_;
    const ::grpc::internal::RpcMethod rpcmethod_SetStrip_;
    const ::grpc::internal::RpcMethod rpcmethod_FollowFlightMode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 
    // Set all lights to the given colors. 
    virtual ::grpc::Status SetMatrix(::grpc::ServerContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest* request, ::mavsdk::rpc::lights::SetMatrixResponse* response);
    // 
    // Set the lights on a given strip to the given colors. 
    virtual ::grpc::Status SetStrip(::grpc::ServerContext* context, const ::mavsdk::rpc::lights::SetStripRequest* request, ::mavsdk::rpc::lights::SetStripResponse* response);
    // 
    // Set whether the lights should follow the flight mode. 
    virtual ::grpc::Status FollowFlightMode(::grpc::ServerContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest* request, ::mavsdk::rpc::lights::FollowFlightModeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMatrix() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMatrix(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::SetMatrixRequest* /*request*/, ::mavsdk::rpc::lights::SetMatrixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMatrix(::grpc::ServerContext* context, ::mavsdk::rpc::lights::SetMatrixRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::lights::SetMatrixResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetStrip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetStrip() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetStrip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStrip(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::SetStripRequest* /*request*/, ::mavsdk::rpc::lights::SetStripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetStrip(::grpc::ServerContext* context, ::mavsdk::rpc::lights::SetStripRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::lights::SetStripResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FollowFlightMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FollowFlightMode() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FollowFlightMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FollowFlightMode(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::FollowFlightModeRequest* /*request*/, ::mavsdk::rpc::lights::FollowFlightModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFollowFlightMode(::grpc::ServerContext* context, ::mavsdk::rpc::lights::FollowFlightModeRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::lights::FollowFlightModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetMatrix<WithAsyncMethod_SetStrip<WithAsyncMethod_FollowFlightMode<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetMatrix() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::lights::SetMatrixRequest, ::mavsdk::rpc::lights::SetMatrixResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::lights::SetMatrixRequest* request, ::mavsdk::rpc::lights::SetMatrixResponse* response) { return this->SetMatrix(context, request, response); }));}
    void SetMessageAllocatorFor_SetMatrix(
        ::grpc::MessageAllocator< ::mavsdk::rpc::lights::SetMatrixRequest, ::mavsdk::rpc::lights::SetMatrixResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::lights::SetMatrixRequest, ::mavsdk::rpc::lights::SetMatrixResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMatrix(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::SetMatrixRequest* /*request*/, ::mavsdk::rpc::lights::SetMatrixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMatrix(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::lights::SetMatrixRequest* /*request*/, ::mavsdk::rpc::lights::SetMatrixResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetStrip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetStrip() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::lights::SetStripRequest, ::mavsdk::rpc::lights::SetStripResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::lights::SetStripRequest* request, ::mavsdk::rpc::lights::SetStripResponse* response) { return this->SetStrip(context, request, response); }));}
    void SetMessageAllocatorFor_SetStrip(
        ::grpc::MessageAllocator< ::mavsdk::rpc::lights::SetStripRequest, ::mavsdk::rpc::lights::SetStripResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::lights::SetStripRequest, ::mavsdk::rpc::lights::SetStripResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetStrip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStrip(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::SetStripRequest* /*request*/, ::mavsdk::rpc::lights::SetStripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetStrip(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::lights::SetStripRequest* /*request*/, ::mavsdk::rpc::lights::SetStripResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FollowFlightMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FollowFlightMode() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::lights::FollowFlightModeRequest, ::mavsdk::rpc::lights::FollowFlightModeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::lights::FollowFlightModeRequest* request, ::mavsdk::rpc::lights::FollowFlightModeResponse* response) { return this->FollowFlightMode(context, request, response); }));}
    void SetMessageAllocatorFor_FollowFlightMode(
        ::grpc::MessageAllocator< ::mavsdk::rpc::lights::FollowFlightModeRequest, ::mavsdk::rpc::lights::FollowFlightModeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::lights::FollowFlightModeRequest, ::mavsdk::rpc::lights::FollowFlightModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FollowFlightMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FollowFlightMode(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::FollowFlightModeRequest* /*request*/, ::mavsdk::rpc::lights::FollowFlightModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FollowFlightMode(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::lights::FollowFlightModeRequest* /*request*/, ::mavsdk::rpc::lights::FollowFlightModeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetMatrix<WithCallbackMethod_SetStrip<WithCallbackMethod_FollowFlightMode<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMatrix() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMatrix(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::SetMatrixRequest* /*request*/, ::mavsdk::rpc::lights::SetMatrixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetStrip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetStrip() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetStrip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStrip(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::SetStripRequest* /*request*/, ::mavsdk::rpc::lights::SetStripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FollowFlightMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FollowFlightMode() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FollowFlightMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FollowFlightMode(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::FollowFlightModeRequest* /*request*/, ::mavsdk::rpc::lights::FollowFlightModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMatrix() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMatrix(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::SetMatrixRequest* /*request*/, ::mavsdk::rpc::lights::SetMatrixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMatrix(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetStrip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetStrip() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetStrip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStrip(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::SetStripRequest* /*request*/, ::mavsdk::rpc::lights::SetStripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetStrip(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FollowFlightMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FollowFlightMode() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FollowFlightMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FollowFlightMode(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::FollowFlightModeRequest* /*request*/, ::mavsdk::rpc::lights::FollowFlightModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFollowFlightMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetMatrix() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetMatrix(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMatrix(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::SetMatrixRequest* /*request*/, ::mavsdk::rpc::lights::SetMatrixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMatrix(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetStrip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetStrip() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetStrip(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetStrip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStrip(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::SetStripRequest* /*request*/, ::mavsdk::rpc::lights::SetStripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetStrip(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FollowFlightMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FollowFlightMode() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FollowFlightMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_FollowFlightMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FollowFlightMode(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::FollowFlightModeRequest* /*request*/, ::mavsdk::rpc::lights::FollowFlightModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FollowFlightMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMatrix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMatrix() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::lights::SetMatrixRequest, ::mavsdk::rpc::lights::SetMatrixResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::lights::SetMatrixRequest, ::mavsdk::rpc::lights::SetMatrixResponse>* streamer) {
                       return this->StreamedSetMatrix(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetMatrix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMatrix(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::SetMatrixRequest* /*request*/, ::mavsdk::rpc::lights::SetMatrixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMatrix(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::lights::SetMatrixRequest,::mavsdk::rpc::lights::SetMatrixResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetStrip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetStrip() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::lights::SetStripRequest, ::mavsdk::rpc::lights::SetStripResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::lights::SetStripRequest, ::mavsdk::rpc::lights::SetStripResponse>* streamer) {
                       return this->StreamedSetStrip(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetStrip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetStrip(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::SetStripRequest* /*request*/, ::mavsdk::rpc::lights::SetStripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetStrip(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::lights::SetStripRequest,::mavsdk::rpc::lights::SetStripResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FollowFlightMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FollowFlightMode() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::lights::FollowFlightModeRequest, ::mavsdk::rpc::lights::FollowFlightModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::lights::FollowFlightModeRequest, ::mavsdk::rpc::lights::FollowFlightModeResponse>* streamer) {
                       return this->StreamedFollowFlightMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FollowFlightMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FollowFlightMode(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::lights::FollowFlightModeRequest* /*request*/, ::mavsdk::rpc::lights::FollowFlightModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFollowFlightMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::lights::FollowFlightModeRequest,::mavsdk::rpc::lights::FollowFlightModeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetMatrix<WithStreamedUnaryMethod_SetStrip<WithStreamedUnaryMethod_FollowFlightMode<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetMatrix<WithStreamedUnaryMethod_SetStrip<WithStreamedUnaryMethod_FollowFlightMode<Service > > > StreamedService;
};

}  // namespace lights
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_lights_2flights_2eproto__INCLUDED
