// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lights/lights.proto

#include "lights/lights.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace mavsdk {
namespace rpc {
namespace lights {
template <typename>
PROTOBUF_CONSTEXPR SetMatrixRequest::SetMatrixRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.matrix_colors_)*/nullptr} {}
struct SetMatrixRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetMatrixRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetMatrixRequestDefaultTypeInternal() {}
  union {
    SetMatrixRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetMatrixRequestDefaultTypeInternal _SetMatrixRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetMatrixResponse::SetMatrixResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.light_result_)*/nullptr} {}
struct SetMatrixResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetMatrixResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetMatrixResponseDefaultTypeInternal() {}
  union {
    SetMatrixResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetMatrixResponseDefaultTypeInternal _SetMatrixResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetStripRequest::SetStripRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strip_colors_)*/nullptr
  , /*decltype(_impl_.strip_id_)*/ 0u
} {}
struct SetStripRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetStripRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetStripRequestDefaultTypeInternal() {}
  union {
    SetStripRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetStripRequestDefaultTypeInternal _SetStripRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetStripResponse::SetStripResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.light_result_)*/nullptr} {}
struct SetStripResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetStripResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetStripResponseDefaultTypeInternal() {}
  union {
    SetStripResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetStripResponseDefaultTypeInternal _SetStripResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FollowFlightModeRequest::FollowFlightModeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enable_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FollowFlightModeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FollowFlightModeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FollowFlightModeRequestDefaultTypeInternal() {}
  union {
    FollowFlightModeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FollowFlightModeRequestDefaultTypeInternal _FollowFlightModeRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FollowFlightModeResponse::FollowFlightModeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.light_result_)*/nullptr} {}
struct FollowFlightModeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FollowFlightModeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FollowFlightModeResponseDefaultTypeInternal() {}
  union {
    FollowFlightModeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FollowFlightModeResponseDefaultTypeInternal _FollowFlightModeResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LightResult::LightResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_str_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.result_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LightResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightResultDefaultTypeInternal() {}
  union {
    LightResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightResultDefaultTypeInternal _LightResult_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LightStrip::LightStrip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lights_)*/ {}
  ,/* _impl_._lights_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LightStripDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightStripDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightStripDefaultTypeInternal() {}
  union {
    LightStrip _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightStripDefaultTypeInternal _LightStrip_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LightMatrix::LightMatrix(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.strips_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LightMatrixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightMatrixDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightMatrixDefaultTypeInternal() {}
  union {
    LightMatrix _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightMatrixDefaultTypeInternal _LightMatrix_default_instance_;
}  // namespace lights
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_lights_2flights_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_lights_2flights_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_lights_2flights_2eproto = nullptr;
const ::uint32_t TableStruct_lights_2flights_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::SetMatrixRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::SetMatrixRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::SetMatrixRequest, _impl_.matrix_colors_),
    0,
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::SetMatrixResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::SetMatrixResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::SetMatrixResponse, _impl_.light_result_),
    0,
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::SetStripRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::SetStripRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::SetStripRequest, _impl_.strip_id_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::SetStripRequest, _impl_.strip_colors_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::SetStripResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::SetStripResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::SetStripResponse, _impl_.light_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::FollowFlightModeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::FollowFlightModeRequest, _impl_.enable_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::FollowFlightModeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::FollowFlightModeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::FollowFlightModeResponse, _impl_.light_result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::LightResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::LightResult, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::LightResult, _impl_.result_str_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::LightStrip, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::LightStrip, _impl_.lights_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::LightMatrix, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::lights::LightMatrix, _impl_.strips_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 9, -1, sizeof(::mavsdk::rpc::lights::SetMatrixRequest)},
        { 10, 19, -1, sizeof(::mavsdk::rpc::lights::SetMatrixResponse)},
        { 20, 30, -1, sizeof(::mavsdk::rpc::lights::SetStripRequest)},
        { 32, 41, -1, sizeof(::mavsdk::rpc::lights::SetStripResponse)},
        { 42, -1, -1, sizeof(::mavsdk::rpc::lights::FollowFlightModeRequest)},
        { 51, 60, -1, sizeof(::mavsdk::rpc::lights::FollowFlightModeResponse)},
        { 61, -1, -1, sizeof(::mavsdk::rpc::lights::LightResult)},
        { 71, -1, -1, sizeof(::mavsdk::rpc::lights::LightStrip)},
        { 80, -1, -1, sizeof(::mavsdk::rpc::lights::LightMatrix)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mavsdk::rpc::lights::_SetMatrixRequest_default_instance_._instance,
    &::mavsdk::rpc::lights::_SetMatrixResponse_default_instance_._instance,
    &::mavsdk::rpc::lights::_SetStripRequest_default_instance_._instance,
    &::mavsdk::rpc::lights::_SetStripResponse_default_instance_._instance,
    &::mavsdk::rpc::lights::_FollowFlightModeRequest_default_instance_._instance,
    &::mavsdk::rpc::lights::_FollowFlightModeResponse_default_instance_._instance,
    &::mavsdk::rpc::lights::_LightResult_default_instance_._instance,
    &::mavsdk::rpc::lights::_LightStrip_default_instance_._instance,
    &::mavsdk::rpc::lights::_LightMatrix_default_instance_._instance,
};
const char descriptor_table_protodef_lights_2flights_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023lights/lights.proto\022\021mavsdk.rpc.lights"
    "\032\024mavsdk_options.proto\"I\n\020SetMatrixReque"
    "st\0225\n\rmatrix_colors\030\001 \001(\0132\036.mavsdk.rpc.l"
    "ights.LightMatrix\"I\n\021SetMatrixResponse\0224"
    "\n\014light_result\030\001 \001(\0132\036.mavsdk.rpc.lights"
    ".LightResult\"X\n\017SetStripRequest\022\020\n\010strip"
    "_id\030\001 \001(\r\0223\n\014strip_colors\030\002 \001(\0132\035.mavsdk"
    ".rpc.lights.LightStrip\"H\n\020SetStripRespon"
    "se\0224\n\014light_result\030\001 \001(\0132\036.mavsdk.rpc.li"
    "ghts.LightResult\")\n\027FollowFlightModeRequ"
    "est\022\016\n\006enable\030\001 \001(\010\"P\n\030FollowFlightModeR"
    "esponse\0224\n\014light_result\030\001 \001(\0132\036.mavsdk.r"
    "pc.lights.LightResult\"\220\002\n\013LightResult\0225\n"
    "\006result\030\001 \001(\0162%.mavsdk.rpc.lights.LightR"
    "esult.Result\022\022\n\nresult_str\030\002 \001(\t\"\265\001\n\006Res"
    "ult\022\022\n\016RESULT_UNKNOWN\020\000\022\022\n\016RESULT_SUCCES"
    "S\020\001\022\024\n\020RESULT_NO_SYSTEM\020\002\022\033\n\027RESULT_CONN"
    "ECTION_ERROR\020\003\022\017\n\013RESULT_BUSY\020\004\022\030\n\024RESUL"
    "T_OUT_OF_BOUNDS\020\005\022\022\n\016RESULT_TIMEOUT\020\006\022\021\n"
    "\rRESULT_FAILED\020\007\"\034\n\nLightStrip\022\016\n\006lights"
    "\030\001 \003(\r\"<\n\013LightMatrix\022-\n\006strips\030\001 \003(\0132\035."
    "mavsdk.rpc.lights.LightStrip2\273\002\n\rLightsS"
    "ervice\022\\\n\tSetMatrix\022#.mavsdk.rpc.lights."
    "SetMatrixRequest\032$.mavsdk.rpc.lights.Set"
    "MatrixResponse\"\004\200\265\030\001\022Y\n\010SetStrip\022\".mavsd"
    "k.rpc.lights.SetStripRequest\032#.mavsdk.rp"
    "c.lights.SetStripResponse\"\004\200\265\030\001\022q\n\020Follo"
    "wFlightMode\022*.mavsdk.rpc.lights.FollowFl"
    "ightModeRequest\032+.mavsdk.rpc.lights.Foll"
    "owFlightModeResponse\"\004\200\265\030\001B\037\n\020io.mavsdk."
    "lightsB\013LightsProtob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_lights_2flights_2eproto_deps[1] =
    {
        &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::absl::once_flag descriptor_table_lights_2flights_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_lights_2flights_2eproto = {
    false,
    false,
    1227,
    descriptor_table_protodef_lights_2flights_2eproto,
    "lights/lights.proto",
    &descriptor_table_lights_2flights_2eproto_once,
    descriptor_table_lights_2flights_2eproto_deps,
    1,
    9,
    schemas,
    file_default_instances,
    TableStruct_lights_2flights_2eproto::offsets,
    file_level_metadata_lights_2flights_2eproto,
    file_level_enum_descriptors_lights_2flights_2eproto,
    file_level_service_descriptors_lights_2flights_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_lights_2flights_2eproto_getter() {
  return &descriptor_table_lights_2flights_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_lights_2flights_2eproto(&descriptor_table_lights_2flights_2eproto);
namespace mavsdk {
namespace rpc {
namespace lights {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lights_2flights_2eproto);
  return file_level_enum_descriptors_lights_2flights_2eproto[0];
}
bool LightResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr LightResult_Result LightResult::RESULT_UNKNOWN;
constexpr LightResult_Result LightResult::RESULT_SUCCESS;
constexpr LightResult_Result LightResult::RESULT_NO_SYSTEM;
constexpr LightResult_Result LightResult::RESULT_CONNECTION_ERROR;
constexpr LightResult_Result LightResult::RESULT_BUSY;
constexpr LightResult_Result LightResult::RESULT_OUT_OF_BOUNDS;
constexpr LightResult_Result LightResult::RESULT_TIMEOUT;
constexpr LightResult_Result LightResult::RESULT_FAILED;
constexpr LightResult_Result LightResult::Result_MIN;
constexpr LightResult_Result LightResult::Result_MAX;
constexpr int LightResult::Result_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class SetMatrixRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetMatrixRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetMatrixRequest, _impl_._has_bits_);
  static const ::mavsdk::rpc::lights::LightMatrix& matrix_colors(const SetMatrixRequest* msg);
  static void set_has_matrix_colors(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::lights::LightMatrix&
SetMatrixRequest::_Internal::matrix_colors(const SetMatrixRequest* msg) {
  return *msg->_impl_.matrix_colors_;
}
SetMatrixRequest::SetMatrixRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.lights.SetMatrixRequest)
}
SetMatrixRequest::SetMatrixRequest(const SetMatrixRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetMatrixRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matrix_colors_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.matrix_colors_ = new ::mavsdk::rpc::lights::LightMatrix(*from._impl_.matrix_colors_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.lights.SetMatrixRequest)
}

inline void SetMatrixRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matrix_colors_){nullptr}
  };
}

SetMatrixRequest::~SetMatrixRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.lights.SetMatrixRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetMatrixRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.matrix_colors_;
}

void SetMatrixRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetMatrixRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.lights.SetMatrixRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.matrix_colors_ != nullptr);
    _impl_.matrix_colors_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMatrixRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.lights.LightMatrix matrix_colors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_matrix_colors(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetMatrixRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.lights.SetMatrixRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.lights.LightMatrix matrix_colors = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::matrix_colors(this),
        _Internal::matrix_colors(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.lights.SetMatrixRequest)
  return target;
}

::size_t SetMatrixRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.lights.SetMatrixRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.lights.LightMatrix matrix_colors = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matrix_colors_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetMatrixRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetMatrixRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetMatrixRequest::GetClassData() const { return &_class_data_; }


void SetMatrixRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetMatrixRequest*>(&to_msg);
  auto& from = static_cast<const SetMatrixRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.lights.SetMatrixRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_matrix_colors()->::mavsdk::rpc::lights::LightMatrix::MergeFrom(
        from._internal_matrix_colors());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetMatrixRequest::CopyFrom(const SetMatrixRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.lights.SetMatrixRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMatrixRequest::IsInitialized() const {
  return true;
}

void SetMatrixRequest::InternalSwap(SetMatrixRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.matrix_colors_, other->_impl_.matrix_colors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMatrixRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lights_2flights_2eproto_getter, &descriptor_table_lights_2flights_2eproto_once,
      file_level_metadata_lights_2flights_2eproto[0]);
}
// ===================================================================

class SetMatrixResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetMatrixResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetMatrixResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::lights::LightResult& light_result(const SetMatrixResponse* msg);
  static void set_has_light_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::lights::LightResult&
SetMatrixResponse::_Internal::light_result(const SetMatrixResponse* msg) {
  return *msg->_impl_.light_result_;
}
SetMatrixResponse::SetMatrixResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.lights.SetMatrixResponse)
}
SetMatrixResponse::SetMatrixResponse(const SetMatrixResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetMatrixResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.light_result_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.light_result_ = new ::mavsdk::rpc::lights::LightResult(*from._impl_.light_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.lights.SetMatrixResponse)
}

inline void SetMatrixResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.light_result_){nullptr}
  };
}

SetMatrixResponse::~SetMatrixResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.lights.SetMatrixResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetMatrixResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.light_result_;
}

void SetMatrixResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetMatrixResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.lights.SetMatrixResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.light_result_ != nullptr);
    _impl_.light_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMatrixResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.lights.LightResult light_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_light_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetMatrixResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.lights.SetMatrixResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.lights.LightResult light_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::light_result(this),
        _Internal::light_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.lights.SetMatrixResponse)
  return target;
}

::size_t SetMatrixResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.lights.SetMatrixResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.lights.LightResult light_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.light_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetMatrixResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetMatrixResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetMatrixResponse::GetClassData() const { return &_class_data_; }


void SetMatrixResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetMatrixResponse*>(&to_msg);
  auto& from = static_cast<const SetMatrixResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.lights.SetMatrixResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_light_result()->::mavsdk::rpc::lights::LightResult::MergeFrom(
        from._internal_light_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetMatrixResponse::CopyFrom(const SetMatrixResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.lights.SetMatrixResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMatrixResponse::IsInitialized() const {
  return true;
}

void SetMatrixResponse::InternalSwap(SetMatrixResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.light_result_, other->_impl_.light_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMatrixResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lights_2flights_2eproto_getter, &descriptor_table_lights_2flights_2eproto_once,
      file_level_metadata_lights_2flights_2eproto[1]);
}
// ===================================================================

class SetStripRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetStripRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetStripRequest, _impl_._has_bits_);
  static const ::mavsdk::rpc::lights::LightStrip& strip_colors(const SetStripRequest* msg);
  static void set_has_strip_colors(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::lights::LightStrip&
SetStripRequest::_Internal::strip_colors(const SetStripRequest* msg) {
  return *msg->_impl_.strip_colors_;
}
SetStripRequest::SetStripRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.lights.SetStripRequest)
}
SetStripRequest::SetStripRequest(const SetStripRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetStripRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strip_colors_){nullptr}
    , decltype(_impl_.strip_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.strip_colors_ = new ::mavsdk::rpc::lights::LightStrip(*from._impl_.strip_colors_);
  }
  _this->_impl_.strip_id_ = from._impl_.strip_id_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.lights.SetStripRequest)
}

inline void SetStripRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strip_colors_){nullptr}
    , decltype(_impl_.strip_id_) { 0u }

  };
}

SetStripRequest::~SetStripRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.lights.SetStripRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetStripRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.strip_colors_;
}

void SetStripRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetStripRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.lights.SetStripRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.strip_colors_ != nullptr);
    _impl_.strip_colors_->Clear();
  }
  _impl_.strip_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetStripRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 strip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.strip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .mavsdk.rpc.lights.LightStrip strip_colors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_strip_colors(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetStripRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.lights.SetStripRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 strip_id = 1;
  if (this->_internal_strip_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_strip_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.lights.LightStrip strip_colors = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::strip_colors(this),
        _Internal::strip_colors(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.lights.SetStripRequest)
  return target;
}

::size_t SetStripRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.lights.SetStripRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.lights.LightStrip strip_colors = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.strip_colors_);
  }

  // uint32 strip_id = 1;
  if (this->_internal_strip_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_strip_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetStripRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetStripRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetStripRequest::GetClassData() const { return &_class_data_; }


void SetStripRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetStripRequest*>(&to_msg);
  auto& from = static_cast<const SetStripRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.lights.SetStripRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_strip_colors()->::mavsdk::rpc::lights::LightStrip::MergeFrom(
        from._internal_strip_colors());
  }
  if (from._internal_strip_id() != 0) {
    _this->_internal_set_strip_id(from._internal_strip_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetStripRequest::CopyFrom(const SetStripRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.lights.SetStripRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStripRequest::IsInitialized() const {
  return true;
}

void SetStripRequest::InternalSwap(SetStripRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetStripRequest, _impl_.strip_id_)
      + sizeof(SetStripRequest::_impl_.strip_id_)
      - PROTOBUF_FIELD_OFFSET(SetStripRequest, _impl_.strip_colors_)>(
          reinterpret_cast<char*>(&_impl_.strip_colors_),
          reinterpret_cast<char*>(&other->_impl_.strip_colors_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetStripRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lights_2flights_2eproto_getter, &descriptor_table_lights_2flights_2eproto_once,
      file_level_metadata_lights_2flights_2eproto[2]);
}
// ===================================================================

class SetStripResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SetStripResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetStripResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::lights::LightResult& light_result(const SetStripResponse* msg);
  static void set_has_light_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::lights::LightResult&
SetStripResponse::_Internal::light_result(const SetStripResponse* msg) {
  return *msg->_impl_.light_result_;
}
SetStripResponse::SetStripResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.lights.SetStripResponse)
}
SetStripResponse::SetStripResponse(const SetStripResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetStripResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.light_result_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.light_result_ = new ::mavsdk::rpc::lights::LightResult(*from._impl_.light_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.lights.SetStripResponse)
}

inline void SetStripResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.light_result_){nullptr}
  };
}

SetStripResponse::~SetStripResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.lights.SetStripResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetStripResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.light_result_;
}

void SetStripResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetStripResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.lights.SetStripResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.light_result_ != nullptr);
    _impl_.light_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetStripResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.lights.LightResult light_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_light_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetStripResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.lights.SetStripResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.lights.LightResult light_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::light_result(this),
        _Internal::light_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.lights.SetStripResponse)
  return target;
}

::size_t SetStripResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.lights.SetStripResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.lights.LightResult light_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.light_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetStripResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetStripResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetStripResponse::GetClassData() const { return &_class_data_; }


void SetStripResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetStripResponse*>(&to_msg);
  auto& from = static_cast<const SetStripResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.lights.SetStripResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_light_result()->::mavsdk::rpc::lights::LightResult::MergeFrom(
        from._internal_light_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetStripResponse::CopyFrom(const SetStripResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.lights.SetStripResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStripResponse::IsInitialized() const {
  return true;
}

void SetStripResponse::InternalSwap(SetStripResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.light_result_, other->_impl_.light_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetStripResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lights_2flights_2eproto_getter, &descriptor_table_lights_2flights_2eproto_once,
      file_level_metadata_lights_2flights_2eproto[3]);
}
// ===================================================================

class FollowFlightModeRequest::_Internal {
 public:
};

FollowFlightModeRequest::FollowFlightModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.lights.FollowFlightModeRequest)
}
FollowFlightModeRequest::FollowFlightModeRequest(const FollowFlightModeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.lights.FollowFlightModeRequest)
}

inline void FollowFlightModeRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.enable_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FollowFlightModeRequest::~FollowFlightModeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.lights.FollowFlightModeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FollowFlightModeRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void FollowFlightModeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FollowFlightModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.lights.FollowFlightModeRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FollowFlightModeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FollowFlightModeRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.lights.FollowFlightModeRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.lights.FollowFlightModeRequest)
  return target;
}

::size_t FollowFlightModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.lights.FollowFlightModeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FollowFlightModeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FollowFlightModeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FollowFlightModeRequest::GetClassData() const { return &_class_data_; }


void FollowFlightModeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FollowFlightModeRequest*>(&to_msg);
  auto& from = static_cast<const FollowFlightModeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.lights.FollowFlightModeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FollowFlightModeRequest::CopyFrom(const FollowFlightModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.lights.FollowFlightModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowFlightModeRequest::IsInitialized() const {
  return true;
}

void FollowFlightModeRequest::InternalSwap(FollowFlightModeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.enable_, other->_impl_.enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FollowFlightModeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lights_2flights_2eproto_getter, &descriptor_table_lights_2flights_2eproto_once,
      file_level_metadata_lights_2flights_2eproto[4]);
}
// ===================================================================

class FollowFlightModeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FollowFlightModeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FollowFlightModeResponse, _impl_._has_bits_);
  static const ::mavsdk::rpc::lights::LightResult& light_result(const FollowFlightModeResponse* msg);
  static void set_has_light_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mavsdk::rpc::lights::LightResult&
FollowFlightModeResponse::_Internal::light_result(const FollowFlightModeResponse* msg) {
  return *msg->_impl_.light_result_;
}
FollowFlightModeResponse::FollowFlightModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.lights.FollowFlightModeResponse)
}
FollowFlightModeResponse::FollowFlightModeResponse(const FollowFlightModeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FollowFlightModeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.light_result_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.light_result_ = new ::mavsdk::rpc::lights::LightResult(*from._impl_.light_result_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.lights.FollowFlightModeResponse)
}

inline void FollowFlightModeResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.light_result_){nullptr}
  };
}

FollowFlightModeResponse::~FollowFlightModeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.lights.FollowFlightModeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FollowFlightModeResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.light_result_;
}

void FollowFlightModeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FollowFlightModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.lights.FollowFlightModeResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.light_result_ != nullptr);
    _impl_.light_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FollowFlightModeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.lights.LightResult light_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_light_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FollowFlightModeResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.lights.FollowFlightModeResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mavsdk.rpc.lights.LightResult light_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::light_result(this),
        _Internal::light_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.lights.FollowFlightModeResponse)
  return target;
}

::size_t FollowFlightModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.lights.FollowFlightModeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.lights.LightResult light_result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.light_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FollowFlightModeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FollowFlightModeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FollowFlightModeResponse::GetClassData() const { return &_class_data_; }


void FollowFlightModeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FollowFlightModeResponse*>(&to_msg);
  auto& from = static_cast<const FollowFlightModeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.lights.FollowFlightModeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_light_result()->::mavsdk::rpc::lights::LightResult::MergeFrom(
        from._internal_light_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FollowFlightModeResponse::CopyFrom(const FollowFlightModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.lights.FollowFlightModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowFlightModeResponse::IsInitialized() const {
  return true;
}

void FollowFlightModeResponse::InternalSwap(FollowFlightModeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.light_result_, other->_impl_.light_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FollowFlightModeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lights_2flights_2eproto_getter, &descriptor_table_lights_2flights_2eproto_once,
      file_level_metadata_lights_2flights_2eproto[5]);
}
// ===================================================================

class LightResult::_Internal {
 public:
};

LightResult::LightResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.lights.LightResult)
}
LightResult::LightResult(const LightResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LightResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_str_) {}

    , decltype(_impl_.result_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_str().empty()) {
    _this->_impl_.result_str_.Set(from._internal_result_str(), _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.lights.LightResult)
}

inline void LightResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.result_str_) {}

    , decltype(_impl_.result_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.result_str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LightResult::~LightResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.lights.LightResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LightResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_str_.Destroy();
}

void LightResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LightResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.lights.LightResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_str_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.lights.LightResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::lights::LightResult_Result>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.lights.LightResult.result_str"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LightResult::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.lights.LightResult)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.lights.LightResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    const std::string& _s = this->_internal_result_str();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.lights.LightResult.result_str");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.lights.LightResult)
  return target;
}

::size_t LightResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.lights.LightResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_result_str());
  }

  // .mavsdk.rpc.lights.LightResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LightResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LightResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LightResult::GetClassData() const { return &_class_data_; }


void LightResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LightResult*>(&to_msg);
  auto& from = static_cast<const LightResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.lights.LightResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _this->_internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LightResult::CopyFrom(const LightResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.lights.LightResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightResult::IsInitialized() const {
  return true;
}

void LightResult::InternalSwap(LightResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_str_, lhs_arena,
                                       &other->_impl_.result_str_, rhs_arena);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lights_2flights_2eproto_getter, &descriptor_table_lights_2flights_2eproto_once,
      file_level_metadata_lights_2flights_2eproto[6]);
}
// ===================================================================

class LightStrip::_Internal {
 public:
};

LightStrip::LightStrip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.lights.LightStrip)
}
LightStrip::LightStrip(const LightStrip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LightStrip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lights_) { from._impl_.lights_ }
    ,/* _impl_._lights_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.lights.LightStrip)
}

inline void LightStrip::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.lights_) { arena }
    ,/* _impl_._lights_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LightStrip::~LightStrip() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.lights.LightStrip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LightStrip::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lights_.~RepeatedField();
}

void LightStrip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LightStrip::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.lights.LightStrip)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_lights()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightStrip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 lights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_lights(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_lights(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LightStrip::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.lights.LightStrip)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 lights = 1;
  {
    int byte_size = _impl_._lights_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(1, _internal_lights(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.lights.LightStrip)
  return target;
}

::size_t LightStrip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.lights.LightStrip)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 lights = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_lights())
    ;
    _impl_._lights_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LightStrip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LightStrip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LightStrip::GetClassData() const { return &_class_data_; }


void LightStrip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LightStrip*>(&to_msg);
  auto& from = static_cast<const LightStrip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.lights.LightStrip)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lights_.MergeFrom(from._impl_.lights_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LightStrip::CopyFrom(const LightStrip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.lights.LightStrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightStrip::IsInitialized() const {
  return true;
}

void LightStrip::InternalSwap(LightStrip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lights_.InternalSwap(&other->_impl_.lights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightStrip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lights_2flights_2eproto_getter, &descriptor_table_lights_2flights_2eproto_once,
      file_level_metadata_lights_2flights_2eproto[7]);
}
// ===================================================================

class LightMatrix::_Internal {
 public:
};

LightMatrix::LightMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.lights.LightMatrix)
}
LightMatrix::LightMatrix(const LightMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LightMatrix* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.strips_){from._impl_.strips_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.lights.LightMatrix)
}

inline void LightMatrix::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.strips_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LightMatrix::~LightMatrix() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.lights.LightMatrix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LightMatrix::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_strips()->~RepeatedPtrField();
}

void LightMatrix::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LightMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.lights.LightMatrix)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_strips()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightMatrix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .mavsdk.rpc.lights.LightStrip strips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_strips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LightMatrix::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.lights.LightMatrix)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.lights.LightStrip strips = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_strips_size()); i < n; i++) {
    const auto& repfield = this->_internal_strips(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.lights.LightMatrix)
  return target;
}

::size_t LightMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.lights.LightMatrix)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.lights.LightStrip strips = 1;
  total_size += 1UL * this->_internal_strips_size();
  for (const auto& msg : this->_internal_strips()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LightMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LightMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LightMatrix::GetClassData() const { return &_class_data_; }


void LightMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LightMatrix*>(&to_msg);
  auto& from = static_cast<const LightMatrix&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.lights.LightMatrix)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_strips()->MergeFrom(from._internal_strips());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LightMatrix::CopyFrom(const LightMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.lights.LightMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightMatrix::IsInitialized() const {
  return true;
}

void LightMatrix::InternalSwap(LightMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_strips()->InternalSwap(other->_internal_mutable_strips());
}

::PROTOBUF_NAMESPACE_ID::Metadata LightMatrix::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lights_2flights_2eproto_getter, &descriptor_table_lights_2flights_2eproto_once,
      file_level_metadata_lights_2flights_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace lights
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::lights::SetMatrixRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::lights::SetMatrixRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::lights::SetMatrixRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::lights::SetMatrixResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::lights::SetMatrixResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::lights::SetMatrixResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::lights::SetStripRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::lights::SetStripRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::lights::SetStripRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::lights::SetStripResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::lights::SetStripResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::lights::SetStripResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::lights::FollowFlightModeRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::lights::FollowFlightModeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::lights::FollowFlightModeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::lights::FollowFlightModeResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::lights::FollowFlightModeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::lights::FollowFlightModeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::lights::LightResult*
Arena::CreateMaybeMessage< ::mavsdk::rpc::lights::LightResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::lights::LightResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::lights::LightStrip*
Arena::CreateMaybeMessage< ::mavsdk::rpc::lights::LightStrip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::lights::LightStrip >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::lights::LightMatrix*
Arena::CreateMaybeMessage< ::mavsdk::rpc::lights::LightMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::lights::LightMatrix >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
