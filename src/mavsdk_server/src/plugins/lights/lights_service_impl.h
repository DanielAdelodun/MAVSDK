// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/lights/lights.proto)

#include "lights/lights.grpc.pb.h"
#include "plugins/lights/lights.h"

#include "mavsdk.h"

#include "lazy_plugin.h"

#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {

template<typename Lights = Lights, typename LazyPlugin = LazyPlugin<Lights>>

class LightsServiceImpl final : public rpc::lights::LightsService::Service {
public:
    LightsServiceImpl(LazyPlugin& lazy_plugin) : _lazy_plugin(lazy_plugin) {}

    template<typename ResponseType>
    void fillResponseWithResult(ResponseType* response, mavsdk::Lights::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_lights_result = new rpc::lights::LightsResult();
        rpc_lights_result->set_result(rpc_result);
        std::stringstream ss;
        ss << result;
        rpc_lights_result->set_result_str(ss.str());

        response->set_allocated_lights_result(rpc_lights_result);
    }

    static rpc::lights::LightResult::Result
    translateToRpcResult(const mavsdk::Lights::Result& result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavsdk::Lights::Result::Unknown:
                return rpc::lights::LightResult_Result_RESULT_UNKNOWN;
            case mavsdk::Lights::Result::Success:
                return rpc::lights::LightResult_Result_RESULT_SUCCESS;
            case mavsdk::Lights::Result::NoSystem:
                return rpc::lights::LightResult_Result_RESULT_NO_SYSTEM;
            case mavsdk::Lights::Result::ConnectionError:
                return rpc::lights::LightResult_Result_RESULT_CONNECTION_ERROR;
            case mavsdk::Lights::Result::Busy:
                return rpc::lights::LightResult_Result_RESULT_BUSY;
            case mavsdk::Lights::Result::OutOfBounds:
                return rpc::lights::LightResult_Result_RESULT_OUT_OF_BOUNDS;
            case mavsdk::Lights::Result::Timeout:
                return rpc::lights::LightResult_Result_RESULT_TIMEOUT;
            case mavsdk::Lights::Result::Failed:
                return rpc::lights::LightResult_Result_RESULT_FAILED;
        }
    }

    static mavsdk::Lights::Result
    translateFromRpcResult(const rpc::lights::LightResult::Result result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case rpc::lights::LightResult_Result_RESULT_UNKNOWN:
                return mavsdk::Lights::Result::Unknown;
            case rpc::lights::LightResult_Result_RESULT_SUCCESS:
                return mavsdk::Lights::Result::Success;
            case rpc::lights::LightResult_Result_RESULT_NO_SYSTEM:
                return mavsdk::Lights::Result::NoSystem;
            case rpc::lights::LightResult_Result_RESULT_CONNECTION_ERROR:
                return mavsdk::Lights::Result::ConnectionError;
            case rpc::lights::LightResult_Result_RESULT_BUSY:
                return mavsdk::Lights::Result::Busy;
            case rpc::lights::LightResult_Result_RESULT_OUT_OF_BOUNDS:
                return mavsdk::Lights::Result::OutOfBounds;
            case rpc::lights::LightResult_Result_RESULT_TIMEOUT:
                return mavsdk::Lights::Result::Timeout;
            case rpc::lights::LightResult_Result_RESULT_FAILED:
                return mavsdk::Lights::Result::Failed;
        }
    }

    static std::unique_ptr<rpc::lights::LightStrip>
    translateToRpcLightStrip(const mavsdk::Lights::LightStrip& light_strip)
    {
        auto rpc_obj = std::make_unique<rpc::lights::LightStrip>();

        for (const auto& elem : light_strip.lights) {
            rpc_obj->add_lights(elem);
        }

        return rpc_obj;
    }

    static mavsdk::Lights::LightStrip
    translateFromRpcLightStrip(const rpc::lights::LightStrip& light_strip)
    {
        mavsdk::Lights::LightStrip obj;

        for (const auto& elem : light_strip.lights()) {
            obj.lights.push_back(elem);
        }

        return obj;
    }

    static std::unique_ptr<rpc::lights::LightMatrix>
    translateToRpcLightMatrix(const mavsdk::Lights::LightMatrix& light_matrix)
    {
        auto rpc_obj = std::make_unique<rpc::lights::LightMatrix>();

        for (const auto& elem : light_matrix.strips) {
            auto* ptr = rpc_obj->add_strips();
            ptr->CopyFrom(*translateToRpcLightStrip(elem).release());
        }

        return rpc_obj;
    }

    static mavsdk::Lights::LightMatrix
    translateFromRpcLightMatrix(const rpc::lights::LightMatrix& light_matrix)
    {
        mavsdk::Lights::LightMatrix obj;

        for (const auto& elem : light_matrix.strips()) {
            obj.strips.push_back(
                translateFromRpcLightStrip(static_cast<mavsdk::rpc::lights::LightStrip>(elem)));
        }

        return obj;
    }

    grpc::Status SetMatrix(
        grpc::ServerContext* /* context */,
        const rpc::lights::SetMatrixRequest* request,
        rpc::lights::SetMatrixResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::Lights::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetMatrix sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->set_matrix(
            translateFromRpcLightMatrix(request->matrix_colors()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetStrip(
        grpc::ServerContext* /* context */,
        const rpc::lights::SetStripRequest* request,
        rpc::lights::SetStripResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::Lights::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetStrip sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->set_strip(
            request->strip_id(), translateFromRpcLightStrip(request->strip_colors()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status FollowFlightMode(
        grpc::ServerContext* /* context */,
        const rpc::lights::FollowFlightModeRequest* request,
        rpc::lights::FollowFlightModeResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::Lights::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "FollowFlightMode sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->follow_flight_mode(request->enable());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    void stop()
    {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom)
    {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom)
    {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    LazyPlugin& _lazy_plugin;

    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

} // namespace mavsdk_server
} // namespace mavsdk